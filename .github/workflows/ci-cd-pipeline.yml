# A GitHub Actions workflow for a Node.js app that installs dependencies, runs tests, and deploys the app
# This is the name of your GitHub Actions workflow.
name: Node.js CI/CD

# This specifies the events that will trigger the workflow.
# In this case, the workflow will run on every push to the `main` branch.
on:
  push:
    branches: [main]

# A workflow is made up of one or more jobs that can run in parallel.
# This workflow has two jobs: `build-and-test` and `deploy`.
jobs:
  build-and-test:
    # Specifies the type of runner that the job will run on.
    # `ubuntu-latest` is a virtual machine hosted by GitHub.
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checks out your repository code into the runner's workspace.
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Sets up a Node.js environment.
      # This action automatically handles installing the correct version of Node.js.
      - name: Set up Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: '18' # You can change this to your desired Node.js version

      # Step 3: Installs the project dependencies.
      # `npm ci` is used here instead of `npm install` for CI/CD pipelines.
      # It installs a clean version of dependencies from `package-lock.json`,
      # ensuring consistent builds.
      - name: Install dependencies
        run: npm ci

      # Step 4: Runs the automated tests.
      # If any test fails, this step will fail, causing the entire job to fail.
      - name: Run tests
        run: npm test

      # Step 5: Archives the build artifacts.
      # This step is crucial for passing the build output from this job to the
      # next one (the deploy job). It packages the necessary files for deployment.
      - name: Archive build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-artifact
          path: . # Path to the files you want to save. You may need to change this.

  deploy:
    # This job will only run if the `build-and-test` job has completed successfully.
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      # Step 1: Downloads the build artifacts from the previous job.
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifact
          path: .

      # Step 2: This is a placeholder for your deployment command.
      # You would replace this with the actual command to deploy your application.
      # Examples:
      # - To deploy to a server via SSH: `scp -r . user@server:/path/to/app`
      # - To deploy to a cloud provider like Azure, AWS, or GCP:
      #   `az webapp up --resource-group <resource_group> --name <app_name> --location <location>`
      - name: Deploy to production
        run: echo "Deployment step goes here."
